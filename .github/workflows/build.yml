name: build

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  release:
    types: [published]

  workflow_dispatch:

jobs:
  windows-msys:
    name: ${{ matrix.btype }} Windows-GCC ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        cc: [gcc]
        btype: [Release, Debug]
        include:
          - arch: x86_64
            msystem: MINGW64
            prefix: mingw-w64-x86_64

          - btype: Release
            rule: install

          - btype: Debug
            rule: debug

    defaults:
      run:
        shell: msys2 {0}

    steps:

    - uses: msys2/setup-msys2@v2
      with:
        install: ${{ matrix.prefix }}-binutils ${{ matrix.prefix }}-make ${{ matrix.prefix }}-${{ matrix.cc }}
        msystem: ${{ matrix.msystem }}
        path-type: minimal
        release: false
        update: false

    - uses: actions/checkout@v3.1.0
      with:
        submodules: recursive

    - name: Build
      if: ${{ github.event_name != 'release' || matrix.btype != 'Debug' }} # skip Debug configuration in Release build
      run: |
        make clean ARCH=${{ matrix.arch }}
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin USE_SDL=0 USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=vulkan CNAME=qsand_vulkan BUILD_SERVER=0
        make clean ARCH=${{ matrix.arch }}
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin USE_SDL=0 USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=opengl2 CNAME=qsand_opengl2 BUILD_SERVER=0
        make clean ARCH=${{ matrix.arch }}
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin USE_SDL=0 USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=opengl

    - uses: actions/upload-artifact@v3.1.1
      if: matrix.cc == 'gcc' && matrix.btype == 'release'
      with:
        name: windows-mingw-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5
        
  ubuntu-x86:
    name: ${{ matrix.btype }} Ubuntu ${{ matrix.arch }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        cc: [gcc]
        btype: [Release, Debug]
        include:
          - btype: Release
            rule: install

          - btype: Debug
            if: ${{ github.event_name != 'release' }}
            rule: debug

          - arch: x86_64
            use_sdl: USE_SDL=1

    steps:

    - name: Install tools
      run: |
        if [ ${{ matrix.arch }} == "x86" ]; then
          sudo dpkg --add-architecture i386
          sudo apt-get -qq update
          sudo apt-get -y install gcc-multilib libcurl4-openssl-dev:i386 mesa-common-dev:i386 libxxf86dga-dev:i386 libxrandr-dev:i386 libxxf86vm-dev:i386 libasound-dev:i386
        else
          sudo apt-get -qq update
          sudo apt-get -y install libcurl4-openssl-dev mesa-common-dev libxxf86dga-dev libxrandr-dev libxxf86vm-dev libasound-dev libsdl2-dev
        fi

    - uses: actions/checkout@v3.1.0
      with:
        submodules: recursive

    - name: Build
      if: ${{ github.event_name != 'release' || matrix.btype != 'Debug' }} # skip in Release builds
      run: |
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin ${{ matrix.use_sdl }} USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=vulkan CNAME=qsand_vulkan BUILD_SERVER=0
        make clean ARCH=${{ matrix.arch }} 
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin ${{ matrix.use_sdl }} USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=opengl2 CNAME=qsand_opengl2 BUILD_SERVER=0
        make clean ARCH=${{ matrix.arch }} 
        make ${{ matrix.rule }} -j 8 ARCH=${{ matrix.arch }} CC=${{ matrix.cc }} DESTDIR=bin ${{ matrix.use_sdl }} USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=opengl

    - uses: actions/upload-artifact@v3.1.1
      if: matrix.cc == 'gcc' && matrix.btype == 'release'
      with:
        name: linux-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5

  macos-x86:
    name: ${{ matrix.btype }} macOS x86_64
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        cc: [clang]
        btype: [Release, Debug]
        include:
          - btype: Release
            rule: install

          - btype: Debug
            rule: debug

    steps:

    - name: Install tools
      run: brew install coreutils sdl2

    - uses: actions/checkout@v3.1.0
      with:
        submodules: recursive

    - name: Build
      if: ${{ github.event_name != 'release' || matrix.btype != 'Debug' }} # skip Debug configuration in Release build
      run: |
        make ${{ matrix.rule }} -j 4 CC=${{ matrix.cc }} DESTDIR=bin INSTALL=ginstall USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=vulkan CNAME=qsand_vulkan BUILD_SERVER=0
        make clean ARCH=${{ matrix.arch }} 
        make ${{ matrix.rule }} -j 4 CC=${{ matrix.cc }} DESTDIR=bin INSTALL=ginstall USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=opengl2 CNAME=qsand_opengl2 BUILD_SERVER=0
        make clean ARCH=${{ matrix.arch }} 
        make ${{ matrix.rule }} -j 4 CC=${{ matrix.cc }} DESTDIR=bin INSTALL=ginstall USE_RENDERER_DLOPEN=0 RENDERER_DEFAULT=opengl

    - uses: actions/upload-artifact@v3.1.1
      if: matrix.cc == 'clang' && matrix.btype == 'release'
      with:
        name: macos-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5

  update-release:
    if: ${{ github.event_name == 'release' }}
    needs: [windows-msys, ubuntu-x86, macos-x86]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          # - artifact_dir: linux-aarch64
          #   artifact_name: qsand_linux-aarch64.zip

          # - artifact_dir: linux-armv7
          #  artifact_name: qsand_linux-armv7.zip

          #- artifact_dir: linux-x86
          #  artifact_name: qsand_linux-x86.zip

          - artifact_dir: linux-x86_64
            artifact_name: qsand_linux-x86_64.zip

          #- artifact_dir: windows-mingw-x86
#           artifact_name: qsand_windows-mingw-x86.zip
          #  artifact_name: qsand_windows-x86.zip 

          - artifact_dir: windows-mingw-x86_64
#           artifact_name: qsand_windows-mingw-x86_64.zip
            artifact_name: qsand_windows-x86_64.zip

          #- artifact_dir: windows-msvc-x86
          # artifact_name: qsand_windows-msvc-x86.zip

          #- artifact_dir: windows-msvc-x86_64
          # artifact_name: qsand_windows-msvc-x86_64.zip

          #- artifact_dir: windows-msvc-arm64
          # artifact_name: qsand_windows-msvc-arm64.zip
          #  artifact_name: qsand_windows-arm64.zip

          - artifact_dir: macos-x86_64
            artifact_name: qsand_macos-x86_64.zip

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3.0.1

      - name: Create archive
        run: 7z a -r ${{ matrix.artifact_name }} ./${{ matrix.artifact_dir }}/*

      - name: Upload archive
        uses: "svenstaro/upload-release-action@latest"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file: ${{ matrix.artifact_name }}
